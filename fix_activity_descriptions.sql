-- =============================================
-- Script para corregir problemas de codificaci√≥n UTF-8 en LogsActividad
-- Author: StockIT Dev Team
-- Date: $(Get-Date)
-- =============================================

USE StockIT;
GO

PRINT 'üîß Iniciando correcci√≥n de problemas de codificaci√≥n en LogsActividad...';

-- Backup de seguridad antes de las correcciones
PRINT 'üìä Creando backup de LogsActividad...';
IF OBJECT_ID('LogsActividad_Backup_Encoding', 'U') IS NOT NULL
    DROP TABLE LogsActividad_Backup_Encoding;

SELECT * INTO LogsActividad_Backup_Encoding FROM LogsActividad;
PRINT '‚úÖ Backup creado como LogsActividad_Backup_Encoding';

-- Correcci√≥n de problemas de codificaci√≥n UTF-8 comunes
PRINT 'üîÑ Corrigiendo problemas de codificaci√≥n...';

UPDATE LogsActividad 
SET descripcion = REPLACE(
    REPLACE(
        REPLACE(
            REPLACE(
                REPLACE(
                    REPLACE(
                        REPLACE(
                            REPLACE(
                                REPLACE(
                                    REPLACE(descripcion, 'Actualizaci√É¬≥n', 'Actualizaci√≥n'),
                                    'creaci√É¬≥n', 'creaci√≥n'),
                                'modificaci√É¬≥n', 'modificaci√≥n'),
                            'Asignaci√É¬≥n', 'Asignaci√≥n'),
                        'Devoluci√É¬≥n', 'Devoluci√≥n'),
                    'Reparaci√É¬≥n', 'Reparaci√≥n'),
                'Env√É¬≠o', 'Env√≠o'),
            'ubicaci√É¬≥n', 'ubicaci√≥n'),
        'est√É¬°', 'est√°'),
    'soluci√É¬≥n', 'soluci√≥n')
WHERE descripcion LIKE '%√É%';

DECLARE @rowsAffected INT = @@ROWCOUNT;
PRINT CONCAT('‚úÖ ', @rowsAffected, ' registros corregidos por problemas de codificaci√≥n.');

-- Verificar registros con JSON malformado que podr√≠an necesitar limpieza
PRINT 'üîç Verificando registros con JSON...';

SELECT TOP 10
    id,
    tabla_afectada,
    accion,
    descripcion,
    fecha_hora
FROM LogsActividad 
WHERE descripcion LIKE '{%'
    AND descripcion LIKE '%}%'
    AND LEN(descripcion) > 50
ORDER BY fecha_hora DESC;

PRINT 'üìä Mostrando algunos registros con formato JSON (los primeros 10)';

-- Estad√≠sticas finales
PRINT 'üìà Estad√≠sticas de LogsActividad:';

SELECT 
    COUNT(*) as TotalRegistros,
    COUNT(CASE WHEN descripcion LIKE '{%}' THEN 1 END) as RegistrosJSON,
    COUNT(CASE WHEN descripcion LIKE '%√É%' THEN 1 END) as RegistrosConProblemasUTF8,
    COUNT(CASE WHEN LEN(descripcion) > 200 THEN 1 END) as RegistrosLargos,
    MIN(fecha_hora) as PrimerRegistro,
    MAX(fecha_hora) as UltimoRegistro
FROM LogsActividad;

-- Mostrar distribuci√≥n por tabla afectada
PRINT 'üìã Distribuci√≥n de actividad por tabla:';

SELECT 
    tabla_afectada,
    COUNT(*) as Cantidad,
    COUNT(CASE WHEN descripcion LIKE '{%}' THEN 1 END) as ConJSON,
    MAX(fecha_hora) as UltimaActividad
FROM LogsActividad 
GROUP BY tabla_afectada
ORDER BY Cantidad DESC;

-- Optimizar √≠ndices para consultas del dashboard
PRINT '‚ö° Optimizando √≠ndices para consultas de actividad reciente...';

-- Crear √≠ndice compuesto para consultas del dashboard si no existe
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_LogsActividad_Dashboard')
BEGIN
    CREATE NONCLUSTERED INDEX IX_LogsActividad_Dashboard
    ON LogsActividad (fecha_hora DESC, usuario_id, tabla_afectada)
    INCLUDE (accion, registro_id, descripcion, ip_address);
    
    PRINT '‚úÖ √çndice IX_LogsActividad_Dashboard creado para optimizar consultas del dashboard';
END
ELSE
BEGIN
    PRINT '‚úÖ √çndice IX_LogsActividad_Dashboard ya existe';
END

PRINT 'üéâ Correcci√≥n de codificaci√≥n completada exitosamente!';
PRINT 'üí° Las mejoras en el frontend ahora formatear√°n autom√°ticamente las descripciones JSON.';

GO 