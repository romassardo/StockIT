openapi: 3.0.0
info:
  title: "StockIT - Sistema de Inventario y Activos IT"
  description: |
    API para la gestión integral de inventario y activos de TI.
    Diseñada con una clara diferenciación entre:
    - **Activos Serializados**: Equipos como Notebooks y Celulares con seguimiento individualizado.
    - **Stock General**: Componentes, periféricos y consumibles gestionados por cantidad.
  version: "1.0.91"
  contact:
    name: "Equipo de Desarrollo StockIT"
    email: "dev@stockit.com"

servers:
  - url: "http://localhost:3002/api"
    description: "Servidor de Desarrollo Local"
  - url: "https://stockit-prod.onrender.com/api"
    description: "Servidor de Producción"

tags:
  - name: "Auth"
    description: "Autenticación, perfiles y gestión de tokens"
  - name: "Users"
    description: "Gestión de usuarios del sistema (CRUD)"
  - name: "Inventory"
    description: "Gestión de activos serializados (Notebooks, Celulares)"
  - name: "Stock"
    description: "Gestión de productos de stock general (por cantidad)"
  - name: "Assignments"
    description: "Asignación y devolución de activos serializados"
  - name: "Repairs"
    description: "Gestión del ciclo de vida de reparaciones"
  - name: "Products"
    description: "Catálogo de productos y categorías"
  - name: "Entities"
    description: "Gestión de Empleados, Sectores y Sucursales"
  - name: "Dashboard"
    description: "Endpoints para el panel de control principal"
  - name: "Reports"
    description: "Generación de reportes y exportaciones"
  - name: "Search"
    description: "Búsqueda global y de datos sensibles"
  - name: "Changelog"
    description: "Gestión del changelog del proyecto"

paths:
  /auth/login:
    post:
      tags:
        - "Auth"
      summary: "Iniciar sesión de usuario"
      description: "Autentica a un usuario mediante email y contraseña, devolviendo tokens de acceso y de refresco."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "admin@stockit.com"
                password:
                  type: string
                  example: "Admin123"
      responses:
        '200':
          description: "Autenticación exitosa."
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refreshToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: "#/components/schemas/User"
        '401':
          description: "Credenciales inválidas."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '400':
          description: "Solicitud inválida (ej. campos faltantes)."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/profile:
    get:
      tags:
        - "Auth"
      summary: "Obtener perfil del usuario autenticado"
      description: "Devuelve la información del perfil del usuario que realiza la solicitud."
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Perfil del usuario."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          description: "No autorizado (token inválido o no proporcionado)."

  /auth/change-password:
    post:
      tags:
        - "Auth"
      summary: "Cambiar la contraseña del usuario"
      description: "Permite al usuario autenticado cambiar su propia contraseña, validando la actual."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                  example: "Admin123"
                newPassword:
                  type: string
                  example: "NewPassword456!"
      responses:
        '200':
          description: "Contraseña actualizada exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Contraseña actualizada exitosamente."
        '400':
          description: "Error de validación (ej. contraseña actual incorrecta)."
        '401':
          description: "No autorizado."

  /users:
    get:
      tags:
        - "Users"
      summary: "Obtener lista de usuarios"
      description: "Devuelve una lista paginada de todos los usuarios del sistema. Permite filtros por nombre, email, rol y estado."
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: "Número de página a obtener."
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 10
          description: "Cantidad de usuarios por página."
        - in: query
          name: searchTerm
          schema:
            type: string
          description: "Término de búsqueda para nombre o email."
        - in: query
          name: role
          schema:
            type: string
            enum: [admin, usuario]
          description: "Filtrar por rol."
        - in: query
          name: status
          schema:
            type: string
            enum: [active, inactive]
          description: "Filtrar por estado."
      responses:
        '200':
          description: "Lista paginada de usuarios."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUsers"
        '401':
          description: "No autorizado."
        '403':
          description: "Acceso denegado (rol no permitido)."

    post:
      tags:
        - "Users"
      summary: "Crear un nuevo usuario"
      description: "Crea un nuevo usuario en el sistema. Requiere rol de administrador."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserInput"
      responses:
        '201':
          description: "Usuario creado exitosamente."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: "Datos de entrada inválidos (ej. email ya existe)."
        '401':
          description: "No autorizado."
        '403':
          description: "Acceso denegado."

  /users/{id}:
    get:
      tags:
        - "Users"
      summary: "Obtener un usuario por ID"
      description: "Devuelve los detalles de un usuario específico."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID del usuario a obtener."
      responses:
        '200':
          description: "Detalles del usuario."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          description: "Usuario no encontrado."

    put:
      tags:
        - "Users"
      summary: "Actualizar un usuario"
      description: "Actualiza los datos de un usuario existente. Requiere rol de administrador."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID del usuario a actualizar."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserInput"
      responses:
        '200':
          description: "Usuario actualizado exitosamente."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: "Datos de entrada inválidos."
        '404':
          description: "Usuario no encontrado."

  /users/{id}/toggle-active:
    put:
      tags:
        - "Users"
      summary: "Activar o desactivar un usuario"
      description: "Cambia el estado 'activo' de un usuario. Requiere rol de administrador."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "ID del usuario a modificar."
      responses:
        '200':
          description: "Estado del usuario actualizado."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Estado del usuario actualizado correctamente."
                  activo:
                    type: boolean
                    example: false
        '404':
          description: "Usuario no encontrado."

  /products:
    get:
      tags:
        - "Products"
      summary: "Obtener lista de productos del catálogo"
      description: "Devuelve una lista paginada de todos los productos definidos en el catálogo, incluyendo su categoría y stock actual si aplica."
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
        - in: query
          name: searchTerm
          schema:
            type: string
          description: "Término de búsqueda para marca, modelo o categoría."
      responses:
        '200':
          description: "Lista paginada de productos."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedProducts"
        '401':
          description: "No autorizado."

    post:
      tags:
        - "Products"
      summary: "Crear un nuevo producto en el catálogo"
      description: "Crea un nuevo producto. Solo para administradores. Si el producto no usa número de serie, se crea automáticamente una entrada en StockGeneral."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        '201':
          description: "Producto creado exitosamente."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '400':
          description: "Datos inválidos."

  /products/{id}:
    put:
      tags:
        - "Products"
      summary: "Actualizar un producto del catálogo"
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        '200':
          description: "Producto actualizado."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '404':
          description: "Producto no encontrado."

    patch:
      tags:
        - "Products"
      summary: "Activar o desactivar un producto"
      description: "Cambia el estado 'activo' de un producto en el catálogo."
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        '200':
          description: "Estado del producto actualizado."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Estado del producto actualizado."
                  activo:
                    type: boolean
                    example: false
        '404':
          description: "Producto no encontrado."

  /categories:
    get:
      tags:
        - "Products"
      summary: "Obtener lista de todas las categorías"
      description: "Devuelve un listado jerárquico de todas las categorías de productos."
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Lista de categorías."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"

    post:
      tags:
        - "Products"
      summary: "Crear una nueva categoría"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryInput"
      responses:
        '201':
          description: "Categoría creada."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"

  /categories/{id}:
    put:
      tags:
        - "Products"
      summary: "Actualizar una categoría"
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryInput"
      responses:
        '200':
          description: "Categoría actualizada."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        '404':
          description: "Categoría no encontrada."
    patch:
      tags:
        - "Products"
      summary: "Activar o desactivar una categoría"
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        '200':
          description: "Estado de la categoría actualizado."
        '404':
          description: "Categoría no encontrada."

  /inventory:
    get:
      tags:
        - "Inventory"
      summary: "Obtener lista de inventario individual"
      description: "Devuelve una lista paginada de todos los activos con número de serie (Notebooks, Celulares)."
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
        - in: query
          name: searchTerm
          schema:
            type: string
          description: "Término de búsqueda para número de serie, marca, modelo o categoría."
        - in: query
          name: status
          schema:
            type: string
            enum: [Disponible, Asignado, En Reparación, Dado de Baja]
          description: "Filtrar por estado del activo."
      responses:
        '200':
          description: "Lista paginada de activos serializados."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedInventory"
    post:
      tags:
        - "Inventory"
      summary: "Crear un nuevo activo en inventario individual"
      description: "Crea uno o varios activos con número de serie. Ideal para ingresos de lotes."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInventoryInput"
      responses:
        '201':
          description: "Activo(s) creado(s) exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Se han creado 5 activos exitosamente."
        '400':
          description: "Datos inválidos (ej. N/S duplicado)."

  /inventory/{id}:
    get:
      tags:
        - "Inventory"
      summary: "Obtener detalles de un activo"
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        '200':
          description: "Detalles del activo."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
        '404':
          description: "Activo no encontrado."
    put:
      tags:
        - "Inventory"
      summary: "Actualizar un activo"
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateInventoryInput"
      responses:
        '200':
          description: "Activo actualizado."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
        '404':
          description: "Activo no encontrado."

  /inventory/{id}/history:
    get:
      tags:
        - "Inventory"
      summary: "Obtener historial de un activo"
      description: "Devuelve el historial completo de un activo, incluyendo asignaciones, reparaciones y logs de actividad."
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        '200':
          description: "Historial completo del activo."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetHistory"
        '404':
          description: "Activo no encontrado."

  /stock:
    get:
      tags:
        - "Stock"
      summary: "Obtener estado del stock general"
      description: "Devuelve una lista paginada de todos los productos gestionados por cantidad."
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
        - in: query
          name: searchTerm
          schema:
            type: string
          description: "Término de búsqueda para marca, modelo o categoría."
      responses:
        '200':
          description: "Lista paginada de productos en stock."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedStock"

  /stock/entry:
    post:
      tags:
        - "Stock"
      summary: "Registrar una entrada de stock"
      description: "Añade cantidad a un producto del stock general y registra el movimiento."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StockMovementInput"
      responses:
        '200':
          description: "Entrada registrada exitosamente."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StockItem"

  /stock/exit:
    post:
      tags:
        - "Stock"
      summary: "Registrar una salida de stock"
      description: "Resta cantidad a un producto del stock general y registra el movimiento."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StockMovementInput"
      responses:
        '200':
          description: "Salida registrada exitosamente."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StockItem"
        '400':
          description: "Stock insuficiente."

  /stock/{productId}/movements:
    get:
      tags:
        - "Stock"
      summary: "Obtener historial de movimientos de un producto"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: "ID del producto de stock general."
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        '200':
          description: "Historial de movimientos del producto."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedStockMovements"
        '404':
          description: "Producto no encontrado."

  /assignments:
    get:
      tags:
        - "Assignments"
      summary: "Obtener lista de asignaciones"
      description: "Devuelve una lista paginada de todas las asignaciones, con filtros por estado, empleado, sector, etc."
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
        - in: query
          name: searchTerm
          schema:
            type: string
          description: "Término de búsqueda para N/S, producto, empleado, etc."
        - in: query
          name: status
          schema:
            type: string
            enum: ["Activa", "Devuelta"]
          description: "Filtrar por estado de la asignación."
      responses:
        '200':
          description: "Lista paginada de asignaciones."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedAssignments"
    post:
      tags:
        - "Assignments"
      summary: "Crear una nueva asignación"
      description: "Asigna un activo de inventario individual a un empleado, sector o sucursal."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAssignmentInput"
      responses:
        '201':
          description: "Asignación creada exitosamente."
        '400':
          description: "Datos inválidos (ej. activo no disponible)."

  /assignments/{id}/return:
    put:
      tags:
        - "Assignments"
      summary: "Registrar la devolución de un activo"
      description: "Marca una asignación como 'Devuelta' y actualiza el estado del activo a 'Disponible'."
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                observaciones:
                  type: string
                  example: "El equipo se devuelve en buenas condiciones."
      responses:
        '200':
          description: "Devolución registrada exitosamente."
        '404':
          description: "Asignación no encontrada."

  /assignments/{id}/details:
    get:
      tags:
        - "Assignments"
      summary: "Obtener detalles sensibles de una asignación"
      description: "Endpoint específico para la Bóveda de Datos. Devuelve información sensible como contraseñas, cuentas, etc."
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        '200':
          description: "Detalles sensibles de la asignación."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentDetails"
        '404':
          description: "Asignación no encontrada."

  /repairs:
    get:
      tags:
        - "Repairs"
      summary: "Obtener lista de reparaciones activas"
      description: "Devuelve una lista paginada de todos los activos que se encuentran actualmente en reparación."
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
      responses:
        '200':
          description: "Lista de reparaciones activas."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedRepairs"
    post:
      tags:
        - "Repairs"
      summary: "Enviar un activo a reparación"
      description: "Inicia un nuevo proceso de reparación para un activo serializado."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRepairInput"
      responses:
        '201':
          description: "Proceso de reparación iniciado."
        '400':
          description: "Datos inválidos (ej. el activo no puede ser enviado a reparación)."

  /repairs/{id}/complete:
    put:
      tags:
        - "Repairs"
      summary: "Completar una reparación"
      description: "Registra el retorno de un activo desde el servicio técnico."
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompleteRepairInput"
      responses:
        '200':
          description: "Reparación completada."
        '404':
          description: "Reparación no encontrada."

  /repairs/{id}/cancel:
    put:
      tags:
        - "Repairs"
      summary: "Cancelar una reparación"
      description: "Cancela un proceso de reparación y devuelve el activo al estado 'Disponible'."
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/IdPath"
      responses:
        '200':
          description: "Reparación cancelada."
        '404':
          description: "Reparación no encontrada."

  # Endpoints para Empleados
  /employees:
    get:
      tags: ["Entities"]
      summary: "Obtener lista de empleados"
      security: [ { "bearerAuth": [] } ]
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PageSize"
        - in: query
          name: searchTerm
          schema:
            type: string
      responses:
        '200':
          description: "Lista de empleados."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Employee"
    post:
      tags: ["Entities"]
      summary: "Crear un nuevo empleado"
      security: [ { "bearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeInput"
      responses:
        '201':
          description: "Empleado creado."

  /employees/{id}:
    put:
      tags: ["Entities"]
      summary: "Actualizar un empleado"
      security: [ { "bearerAuth": [] } ]
      parameters: [ { "$ref": "#/components/parameters/IdPath" } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeInput"
      responses:
        '200':
          description: "Empleado actualizado."
    patch:
      tags: ["Entities"]
      summary: "Activar/desactivar un empleado"
      security: [ { "bearerAuth": [] } ]
      parameters: [ { "$ref": "#/components/parameters/IdPath" } ]
      responses:
        '200':
          description: "Estado actualizado."

  # Endpoints para Sectores
  /sectors:
    get:
      tags: ["Entities"]
      summary: "Obtener lista de sectores"
      security: [ { "bearerAuth": [] } ]
      responses:
        '200':
          description: "Lista de sectores."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Sector"
    post:
      tags: ["Entities"]
      summary: "Crear un nuevo sector"
      security: [ { "bearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SectorInput"
      responses:
        '201':
          description: "Sector creado."
  /sectors/{id}:
    put:
      tags: ["Entities"]
      summary: "Actualizar un sector"
      security: [ { "bearerAuth": [] } ]
      parameters: [ { "$ref": "#/components/parameters/IdPath" } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SectorInput"
      responses:
        '200':
          description: "Sector actualizado."
    patch:
      tags: ["Entities"]
      summary: "Activar/desactivar un sector"
      security: [ { "bearerAuth": [] } ]
      parameters: [ { "$ref": "#/components/parameters/IdPath" } ]
      responses:
        '200':
          description: "Estado actualizado."

  # Endpoints para Sucursales
  /branches:
    get:
      tags: ["Entities"]
      summary: "Obtener lista de sucursales"
      security: [ { "bearerAuth": [] } ]
      responses:
        '200':
          description: "Lista de sucursales."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Branch"
    post:
      tags: ["Entities"]
      summary: "Crear una nueva sucursal"
      security: [ { "bearerAuth": [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BranchInput"
      responses:
        '201':
          description: "Sucursal creada."
  /branches/{id}:
    put:
      tags: ["Entities"]
      summary: "Actualizar una sucursal"
      security: [ { "bearerAuth": [] } ]
      parameters: [ { "$ref": "#/components/parameters/IdPath" } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BranchInput"
      responses:
        '200':
          description: "Sucursal actualizada."
    patch:
      tags: ["Entities"]
      summary: "Activar/desactivar una sucursal"
      security: [ { "bearerAuth": [] } ]
      parameters: [ { "$ref": "#/components/parameters/IdPath" } ]
      responses:
        '200':
          description: "Estado actualizado."

  /dashboard/stats:
    get:
      tags: ["Dashboard"]
      summary: "Obtener estadísticas del dashboard"
      description: "Devuelve un conjunto de KPIs y estadísticas clave para la vista principal."
      security: [ { "bearerAuth": [] } ]
      responses:
        '200':
          description: "Estadísticas del sistema."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardStats"

  /dashboard/recent-activity:
    get:
      tags: ["Dashboard"]
      summary: "Obtener actividad reciente"
      description: "Devuelve una lista de las últimas actividades registradas en el sistema (asignaciones, reparaciones, etc.)."
      security: [ { "bearerAuth": [] } ]
      responses:
        '200':
          description: "Lista de actividades recientes."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecentActivity"

  /reports/inventory:
    post:
      tags: ["Reports"]
      summary: "Generar reporte de inventario completo"
      security: [ { "bearerAuth": [] } ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportOptions"
      responses:
        '200':
          description: "Reporte generado en formato solicitado (PDF/Excel)."
          content:
            application/pdf: {}
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet: {}

  /reports/assignments:
    post:
      tags: ["Reports"]
      summary: "Generar reporte de asignaciones"
      security: [ { "bearerAuth": [] } ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportOptions"
      responses:
        '200':
          description: "Reporte de asignaciones."

  /reports/stock-alerts:
    get:
      tags: ["Reports"]
      summary: "Obtener alertas de stock bajo"
      security: [ { "bearerAuth": [] } ]
      responses:
        '200':
          description: "Lista de productos con stock bajo."

  /search/global:
    get:
      tags: ["Search"]
      summary: "Búsqueda global en el sistema"
      security: [ { "bearerAuth": [] } ]
      parameters:
        - in: query
          name: term
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Resultados de la búsqueda."

  /search/sensitive-data:
    get:
      tags: ["Search"]
      summary: "Búsqueda en bóveda de datos sensibles"
      security: [ { "bearerAuth": [] } ]
      parameters:
        - in: query
          name: term
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Resultados de la búsqueda sensible."

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nombre:
          type: string
          example: "Admin StockIT"
        email:
          type: string
          format: email
          example: "admin@stockit.com"
        rol:
          type: string
          enum: [admin, usuario]
          example: "admin"
        activo:
          type: boolean
          example: true

    CreateUserInput:
      type: object
      required:
        - nombre
        - email
        - password
        - rol
      properties:
        nombre:
          type: string
          example: "Nuevo Usuario"
        email:
          type: string
          format: email
          example: "nuevo.usuario@stockit.com"
        password:
          type: string
          example: "Password123!"
        rol:
          type: string
          enum: [admin, usuario]
          example: "usuario"

    UpdateUserInput:
      type: object
      properties:
        nombre:
          type: string
          example: "Usuario Actualizado"
        email:
          type: string
          format: email
          example: "usuario.actualizado@stockit.com"
        rol:
          type: string
          enum: [admin, usuario]
          example: "usuario"
        activo:
          type: boolean
          example: true
        password:
          type: string
          description: "Opcional. Enviar solo si se desea cambiar la contraseña."
          example: "NuevaPassword456!"

    PaginatedUsers:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/User"
        totalItems:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10
        currentPage:
          type: integer
          example: 1

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Mensaje descriptivo del error."

    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        marca:
          type: string
          example: "Dell"
        modelo:
          type: string
          example: "Latitude 5520"
        descripcion:
          type: string
          example: "Notebook empresarial de 15 pulgadas"
        stock_minimo:
          type: integer
          example: 5
        usa_numero_serie:
          type: boolean
          example: true
        activo:
          type: boolean
          example: true
        categoria_id:
          type: integer
          example: 10
        nombre_categoria:
          type: string
          example: "Notebooks"
        cantidad_actual:
          type: integer
          nullable: true
          example: 25
          description: "Stock actual si es un producto sin N/S"

    ProductInput:
      type: object
      required: [marca, modelo, categoria_id, usa_numero_serie]
      properties:
        marca:
          type: string
          example: "Logitech"
        modelo:
          type: string
          example: "MX Master 3"
        descripcion:
          type: string
        stock_minimo:
          type: integer
          example: 10
        categoria_id:
          type: integer
          example: 15
        usa_numero_serie:
          type: boolean
          example: false

    PaginatedProducts:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        totalItems:
          type: integer
        totalPages:
          type: integer
        currentPage:
          type: integer

    Category:
      type: object
      properties:
        id:
          type: integer
        nombre:
          type: string
        categoria_padre_id:
          type: integer
          nullable: true
        ruta_categoria:
          type: string
          example: "COMPUTADORAS > Notebooks"
        nivel:
          type: integer
        requiere_serie:
          type: boolean
        permite_asignacion:
          type: boolean
        permite_reparacion:
          type: boolean
        activo:
          type: boolean

    CategoryInput:
      type: object
      required: [nombre]
      properties:
        nombre:
          type: string
          example: "Periféricos"
        categoria_padre_id:
          type: integer
          nullable: true
          description: "ID de la categoría padre para anidación."
        requiere_serie:
          type: boolean
          default: false
        permite_asignacion:
          type: boolean
          default: false
        permite_reparacion:
          type: boolean
          default: false

    InventoryItem:
      type: object
      properties:
        id:
          type: integer
        producto_id:
          type: integer
        numero_serie:
          type: string
        estado:
          type: string
          enum: [Disponible, Asignado, En Reparación, Dado de Baja]
        fecha_ingreso:
          type: string
          format: date-time
        fecha_baja:
          type: string
          format: date-time
          nullable: true
        motivo_baja:
          type: string
          nullable: true
        producto_nombre:
          type: string
          example: "Apple MacBook Pro 16"
        categoria_nombre:
          type: string
          example: "Notebooks"
        asignacion_actual:
          type: object
          nullable: true
          properties:
            empleado_nombre:
              type: string
            sector_nombre:
              type: string
            sucursal_nombre:
              type: string

    CreateInventoryInput:
      type: object
      required: [producto_id, numeros_serie]
      properties:
        producto_id:
          type: integer
          description: "ID del producto (debe usar número de serie)."
        numeros_serie:
          type: array
          items:
            type: string
          minItems: 1
          example: ["APPLE-SERIAL-001", "APPLE-SERIAL-002"]
        fecha_ingreso:
          type: string
          format: date
          description: "Opcional. Por defecto es la fecha actual."
        
    UpdateInventoryInput:
      type: object
      properties:
        numero_serie:
          type: string
        estado:
          type: string
          enum: [Disponible, Asignado, En Reparación, Dado de Baja]
        fecha_baja:
          type: string
          format: date
        motivo_baja:
          type: string

    PaginatedInventory:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/InventoryItem"
        totalItems:
          type: integer
        totalPages:
          type: integer
        currentPage:
          type: integer

    AssetHistory:
      type: object
      properties:
        assignments:
          type: array
          items: {} # Reemplazar con schema de Asignación
        repairs:
          type: array
          items: {} # Reemplazar con schema de Reparación
        activityLogs:
          type: array
          items: {} # Reemplazar con schema de Log

    StockItem:
      type: object
      properties:
        id:
          type: integer
          description: "ID del producto."
        marca:
          type: string
        modelo:
          type: string
        nombre_categoria:
          type: string
        cantidad_actual:
          type: integer
        stock_minimo:
          type: integer
        ultima_actualizacion:
          type: string
          format: date-time

    StockMovementInput:
      type: object
      required: [producto_id, cantidad, motivo]
      properties:
        producto_id:
          type: integer
        cantidad:
          type: integer
          minimum: 1
        motivo:
          type: string
          example: "Compra a proveedor"
        observaciones:
          type: string
        empleado_id:
          type: integer
        sector_id:
          type: integer
        sucursal_id:
          type: integer

    StockMovement:
      type: object
      properties:
        id:
          type: integer
        tipo_movimiento:
          type: string
          enum: [Entrada, Salida]
        cantidad:
          type: integer
        stock_anterior:
          type: integer
        stock_nuevo:
          type: integer
        fecha_movimiento:
          type: string
          format: date-time
        motivo:
          type: string
        usuario_responsable:
          type: string
        destino:
          type: string
          example: "Empleado: Juan Perez"

    PaginatedStock:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/StockItem"
        totalItems:
          type: integer
        totalPages:
          type: integer
        currentPage:
          type: integer

    PaginatedStockMovements:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/StockMovement"
        totalItems:
          type: integer
        totalPages:
          type: integer
        currentPage:
          type: integer

    Assignment:
      type: object
      properties:
        id:
          type: integer
        numero_serie:
          type: string
        producto_nombre:
          type: string
        categoria_nombre:
          type: string
        estado_activo:
          type: string
          description: "Estado del activo (ej. Asignado)"
        destino_nombre:
          type: string
          description: "Nombre del empleado, sector o sucursal"
        tipo_destino:
          type: string
          enum: [Empleado, Sector, Sucursal]
        fecha_asignacion:
          type: string
          format: date-time
        usuario_asigna:
          type: string

    PaginatedAssignments:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Assignment"
        totalItems:
          type: integer
        totalPages:
          type: integer
        currentPage:
          type: integer

    CreateAssignmentInput:
      type: object
      required: [inventario_individual_id, tipo_asignacion]
      properties:
        inventario_individual_id:
          type: integer
        tipo_asignacion:
          type: string
          enum: [Empleado, Sector, Sucursal]
        empleado_id:
          type: integer
        sector_id:
          type: integer
        sucursal_id:
          type: integer
        observaciones:
          type: string
        password_encriptacion:
          type: string
          description: "Requerido para Notebooks"
        numero_telefono:
          type: string
          description: "Requerido para Celulares"
        cuenta_gmail:
          type: string
        password_gmail:
          type: string
        codigo_2fa_whatsapp:
          type: string
        imei_1:
          type: string
        imei_2:
          type: string

    AssignmentDetails:
      allOf:
        - $ref: "#/components/schemas/Assignment"
        - type: object
          properties:
            password_encriptacion:
              type: string
            numero_telefono:
              type: string
            cuenta_gmail:
              type: string
            password_gmail:
              type: string
            codigo_2fa_whatsapp:
              type: string
            imei_1:
              type: string
            imei_2:
              type: string

    Repair:
      type: object
      properties:
        id:
          type: integer
        inventario_individual_id:
          type: integer
        numero_serie:
          type: string
        producto_nombre:
          type: string
        fecha_envio:
          type: string
          format: date-time
        proveedor:
          type: string
        problema_descripcion:
          type: string
        estado:
          type: string
          enum: [En Reparación, Reparado, Sin Reparación]
        usuario_envia:
          type: string

    PaginatedRepairs:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Repair"
        totalItems:
          type: integer
        totalPages:
          type: integer
        currentPage:
          type: integer

    CreateRepairInput:
      type: object
      required: [inventario_individual_id, proveedor, problema_descripcion]
      properties:
        inventario_individual_id:
          type: integer
        proveedor:
          type: string
          example: "Soporte Técnico Oficial"
        problema_descripcion:
          type: string
          example: "La pantalla no enciende."

    CompleteRepairInput:
      type: object
      required: [solucion_descripcion, estado_final]
      properties:
        solucion_descripcion:
          type: string
          example: "Se reemplazó el display."
        estado_final:
          type: string
          enum: [Reparado, Sin Reparación]
          description: "Si es 'Reparado', el activo vuelve a 'Disponible'. Si es 'Sin Reparación', pasa a 'Dado de Baja'."

    Employee:
      type: object
      properties:
        id:
          type: integer
        nombre:
          type: string
        apellido:
          type: string
        activo:
          type: boolean

    EmployeeInput:
      type: object
      required: [nombre, apellido]
      properties:
        nombre:
          type: string
        apellido:
          type: string

    Sector:
      type: object
      properties:
        id:
          type: integer
        nombre:
          type: string
        activo:
          type: boolean

    SectorInput:
      type: object
      required: [nombre]
      properties:
        nombre:
          type: string

    Branch:
      type: object
      properties:
        id:
          type: integer
        nombre:
          type: string
        activo:
          type: boolean

    BranchInput:
      type: object
      required: [nombre]
      properties:
        nombre:
          type: string

    ReportOptions:
      type: object
      properties:
        format:
          type: string
          enum: [pdf, excel]
        filters:
          type: object
          description: "Filtros específicos para el reporte."

    DashboardStats:
      type: object

    RecentActivity:
      type: object

  parameters:
    IdPath:
      in: path
      name: id
      required: true
      schema:
        type: integer
      description: "ID del recurso."
    Page:
      in: query
      name: page
      schema:
        type: integer
        default: 1
      description: "Número de página a obtener."
    PageSize:
      in: query
      name: pageSize
      schema:
        type: integer
        default: 10
      description: "Cantidad de items por página."

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Se requiere un token JWT para acceder a este endpoint. El token se obtiene en el login y debe ser enviado en el header 'Authorization' con el formato 'Bearer {token}'." 