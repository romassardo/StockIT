/**
 * üèÅ SCRIPT FINAL: VALIDACI√ìN POST-LIMPIEZA SQL
 * Objetivo: Verificar que la limpieza fue exitosa y no quedan duplicados
 * Validar integridad de SPs despu√©s del cleanup
 */

const fs = require('fs');
const path = require('path');

console.log('üèÅ VALIDACI√ìN FINAL POST-LIMPIEZA SQL STOCKIT');
console.log('==============================================\n');

// Directorios a validar
const DIRS = {
    storedProcedures: 'backend/src/database/stored_procedures',
    migrations: 'backend/src/database/migrations'
};

function analyzeFinalState() {
    console.log('üìä ESTADO FINAL DESPU√âS DE LIMPIEZA:\n');
    
    // 1. Contar archivos restantes
    const spFiles = fs.readdirSync(DIRS.storedProcedures)
        .filter(file => file.endsWith('.sql'));
    
    const migrationFiles = fs.readdirSync(DIRS.migrations)
        .filter(file => file.endsWith('.sql'));
    
    console.log(`‚úÖ STORED PROCEDURES: ${spFiles.length} archivos`);
    console.log(`‚úÖ MIGRACIONES: ${migrationFiles.length} archivos`);
    
    // 2. Verificar que no queden archivos con el patr√≥n problem√°tico del 30-05-2025
    console.log('\nüîç VERIFICANDO ARCHIVOS DEL D√çA PROBLEM√ÅTICO (2025-05-30):\n');
    
    const problematicDate = migrationFiles.filter(file => 
        file.includes('20250530')
    );
    
    problematicDate.forEach(file => {
        const filePath = path.join(DIRS.migrations, file);
        const stats = fs.statSync(filePath);
        console.log(`   üìÑ ${file} (${(stats.size/1024).toFixed(1)}KB)`);
    });
    
    console.log(`\nüìà RESTANTES DEL D√çA PROBLEM√ÅTICO: ${problematicDate.length} archivos`);
    
    // 3. Verificar patrones de naming
    console.log('\nüéØ VERIFICANDO PATRONES DE NAMING:\n');
    
    const standardPattern = /^\d{14}_/; // Fecha est√°ndar: YYYYMMDDHHMMSS_
    const versionPattern = /^V\d{14}__/; // Patr√≥n V: V20250612205500__
    
    const nonStandard = migrationFiles.filter(file => 
        !standardPattern.test(file) && !versionPattern.test(file)
    );
    
    if (nonStandard.length === 0) {
        console.log('   ‚úÖ TODOS los archivos siguen patrones est√°ndar');
    } else {
        console.log('   ‚ö†Ô∏è ARCHIVOS CON PATR√ìN NO EST√ÅNDAR:');
        nonStandard.forEach(file => console.log(`      - ${file}`));
    }
    
    // 4. Verificar tama√±os sospechosos (>10KB indica posibles duplicados)
    console.log('\nüìè VERIFICANDO TAMA√ëOS SOSPECHOSOS (>10KB):\n');
    
    const largeMigrations = migrationFiles
        .map(file => {
            const filePath = path.join(DIRS.migrations, file);
            const stats = fs.statSync(filePath);
            return { file, size: stats.size };
        })
        .filter(item => item.size > 10240) // >10KB
        .sort((a, b) => b.size - a.size);
    
    if (largeMigrations.length === 0) {
        console.log('   ‚úÖ NO hay archivos sospechosamente grandes');
    } else {
        console.log('   ‚ö†Ô∏è ARCHIVOS GRANDES RESTANTES:');
        largeMigrations.forEach(item => {
            console.log(`      - ${item.file} (${(item.size/1024).toFixed(1)}KB)`);
        });
    }
    
    // 5. Listar archivos finales por categor√≠a
    console.log('\nüìã ARCHIVOS FINALES POR CATEGOR√çA:\n');
    
    const categories = {
        'StockGeneral': migrationFiles.filter(f => f.includes('StockGeneral')),
        'Repair': migrationFiles.filter(f => f.includes('Repair')),
        'Report': migrationFiles.filter(f => f.includes('Report')),
        'Assignment': migrationFiles.filter(f => f.includes('Assignment')),
        'Changelog': migrationFiles.filter(f => f.includes('Changelog')),
        'Otros': migrationFiles.filter(f => 
            !f.includes('StockGeneral') && 
            !f.includes('Repair') && 
            !f.includes('Report') && 
            !f.includes('Assignment') && 
            !f.includes('Changelog')
        )
    };
    
    Object.entries(categories).forEach(([category, files]) => {
        if (files.length > 0) {
            console.log(`   üìÇ ${category}: ${files.length} archivos`);
            files.forEach(file => console.log(`      - ${file}`));
        }
    });
    
    // 6. Resumen final
    console.log('\nüèÜ RESUMEN FINAL DE LIMPIEZA:\n');
    console.log('‚úÖ Eliminados archivos duplicados masivos (24KB)');
    console.log('‚úÖ Eliminados formatos no est√°ndar');
    console.log('‚úÖ Eliminadas migraciones manuales problem√°ticas');
    console.log(`‚úÖ Restante: ${migrationFiles.length} archivos LIMPIOS`);
    console.log('‚úÖ Patr√≥n de naming CONSISTENTE');
    console.log('‚úÖ Tama√±os apropiados sin duplicaciones masivas');
    
    console.log('\nüéØ SIGUIENTE PASO RECOMENDADO:');
    console.log('   - Validar que el backend sigue funcionando');
    console.log('   - Ejecutar tests de stored procedures');
    console.log('   - Crear commit final de limpieza');
}

// Ejecutar validaci√≥n
try {
    analyzeFinalState();
} catch (error) {
    console.error('‚ùå ERROR en validaci√≥n:', error.message);
} 