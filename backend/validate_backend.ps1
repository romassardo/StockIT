# üîç SCRIPT DE VALIDACI√ìN BACKEND STOCKIT POST-SINCRONIZACI√ìN SQL
# Objetivo: Verificar que todas las funcionalidades cr√≠ticas siguen operativas
# Fecha: 2025-01-19
# Versi√≥n: v1.0.83

Write-Host "üöÄ INICIANDO VALIDACI√ìN COMPLETA BACKEND STOCKIT" -ForegroundColor Green
Write-Host "=" * 60

$baseUrl = "http://localhost:3000"
$errors = @()
$successCount = 0
$totalTests = 0

# Funci√≥n para hacer requests y manejar errores
function Test-Endpoint {
    param(
        [string]$url,
        [string]$method = "GET",
        [string]$description,
        [hashtable]$headers = @{},
        [string]$body = $null
    )
    
    $global:totalTests++
    Write-Host "üìã PRUEBA $totalTests`: $description" -ForegroundColor Cyan
    
    try {
        $params = @{
            Uri = $url
            Method = $method
            Headers = $headers
            UseBasicParsing = $true
        }
        
        if ($body) {
            $params.Body = $body
            $params.ContentType = "application/json"
        }
        
        $response = Invoke-WebRequest @params
        
        if ($response.StatusCode -eq 200 -or $response.StatusCode -eq 201) {
            Write-Host "   ‚úÖ SUCCESS ($($response.StatusCode))" -ForegroundColor Green
            $global:successCount++
            return $response.Content
        } else {
            Write-Host "   ‚ö†Ô∏è UNEXPECTED STATUS: $($response.StatusCode)" -ForegroundColor Yellow
            return $response.Content
        }
    }
    catch {
        Write-Host "   ‚ùå ERROR: $($_.Exception.Message)" -ForegroundColor Red
        $global:errors += "‚ùå $description`: $($_.Exception.Message)"
        return $null
    }
}

Write-Host "`nüîç FASE 1: ENDPOINTS B√ÅSICOS" -ForegroundColor Yellow
Write-Host "-" * 40

# Test 1: Endpoint ra√≠z
Test-Endpoint "$baseUrl/" "GET" "Endpoint ra√≠z - informaci√≥n b√°sica" | Out-Null

# Test 2: Productos (no requiere auth)
Test-Endpoint "$baseUrl/api/products" "GET" "Listar productos" | Out-Null

# Test 3: Categor√≠as
Test-Endpoint "$baseUrl/api/products/categories" "GET" "Listar categor√≠as" | Out-Null

# Test 4: Empleados
Test-Endpoint "$baseUrl/api/employees" "GET" "Listar empleados" | Out-Null

# Test 5: Sectores
Test-Endpoint "$baseUrl/api/sectors" "GET" "Listar sectores" | Out-Null

# Test 6: Sucursales  
Test-Endpoint "$baseUrl/api/branches" "GET" "Listar sucursales" | Out-Null

Write-Host "`nüîë FASE 2: AUTENTICACI√ìN Y USUARIOS" -ForegroundColor Yellow
Write-Host "-" * 40

# Test 7: Login (crear usuario de prueba si es necesario)
$loginBody = @{
    email = "admin@stockit.com"
    password = "admin123"
} | ConvertTo-Json

$loginResponse = Test-Endpoint "$baseUrl/api/auth/login" "POST" "Login usuario admin" @{} $loginBody

# Extraer token si el login fue exitoso
$token = $null
if ($loginResponse) {
    try {
        $loginData = $loginResponse | ConvertFrom-Json
        $token = $loginData.token
        Write-Host "   üîë Token obtenido exitosamente" -ForegroundColor Green
    }
    catch {
        Write-Host "   ‚ö†Ô∏è No se pudo extraer token del response" -ForegroundColor Yellow
    }
}

$authHeaders = @{}
if ($token) {
    $authHeaders = @{ "Authorization" = "Bearer $token" }
}

# Test 8: Perfil usuario (requiere auth)
if ($token) {
    Test-Endpoint "$baseUrl/api/auth/profile" "GET" "Obtener perfil usuario" $authHeaders | Out-Null
}

# Test 9: Listar usuarios (requiere auth)
if ($token) {
    Test-Endpoint "$baseUrl/api/users" "GET" "Listar usuarios" $authHeaders | Out-Null
}

Write-Host "`nüì¶ FASE 3: INVENTARIO Y STOCK" -ForegroundColor Yellow
Write-Host "-" * 40

# Test 10: Inventario Individual (Notebooks/Celulares)
Test-Endpoint "$baseUrl/api/inventory" "GET" "Inventario individual (notebooks/celulares)" | Out-Null

# Test 11: Stock General
Test-Endpoint "$baseUrl/api/stock" "GET" "Stock general (otros productos)" | Out-Null

# Test 12: Stock con filtros
Test-Endpoint "$baseUrl/api/stock/alerts" "GET" "Stock bajo m√≠nimo" | Out-Null

Write-Host "`nüë• FASE 4: ASIGNACIONES Y REPARACIONES" -ForegroundColor Yellow
Write-Host "-" * 40

# Test 13: Asignaciones
Test-Endpoint "$baseUrl/api/assignments" "GET" "Listar asignaciones" | Out-Null

# Test 14: Asignaciones activas
Test-Endpoint "$baseUrl/api/assignments/active" "GET" "Asignaciones activas" | Out-Null

# Test 15: Reparaciones
Test-Endpoint "$baseUrl/api/repairs" "GET" "Listar reparaciones" | Out-Null

# Test 16: Reparaciones activas
Test-Endpoint "$baseUrl/api/repairs/active" "GET" "Reparaciones activas" | Out-Null

Write-Host "`nüìä FASE 5: REPORTES Y DASHBOARD" -ForegroundColor Yellow
Write-Host "-" * 40

# Test 17: Dashboard metrics
Test-Endpoint "$baseUrl/api/dashboard/metrics" "GET" "M√©tricas dashboard" | Out-Null

# Test 18: Dashboard stats
Test-Endpoint "$baseUrl/api/dashboard/stats" "GET" "Estad√≠sticas dashboard" | Out-Null

# Test 19: Reporte inventario
Test-Endpoint "$baseUrl/api/reports/inventory" "GET" "Reporte inventario" | Out-Null

# Test 20: B√∫squeda global
Test-Endpoint "$baseUrl/api/search?query=test" "GET" "B√∫squeda global" | Out-Null

Write-Host "`nüìù FASE 6: CHANGELOG Y LOGS" -ForegroundColor Yellow
Write-Host "-" * 40

# Test 21: Changelog
Test-Endpoint "$baseUrl/api/changelog" "GET" "Listar changelog" | Out-Null

Write-Host "`n" + "=" * 60
Write-Host "üèÜ RESUMEN VALIDACI√ìN BACKEND" -ForegroundColor Green
Write-Host "=" * 60

Write-Host "üìä ESTAD√çSTICAS FINALES:" -ForegroundColor Cyan
Write-Host "   ‚úÖ Pruebas exitosas: $successCount/$totalTests" -ForegroundColor Green
Write-Host "   ‚ùå Pruebas fallidas: $($totalTests - $successCount)/$totalTests" -ForegroundColor Red
Write-Host "   üìà Tasa de √©xito: $(([math]::Round(($successCount/$totalTests)*100, 2)))%" -ForegroundColor Cyan

if ($errors.Count -gt 0) {
    Write-Host "`n‚ùå ERRORES DETECTADOS:" -ForegroundColor Red
    foreach ($error in $errors) {
        Write-Host "   $error" -ForegroundColor Red
    }
}

$status = if ($successCount -eq $totalTests) { "üéâ PERFECTO" } 
         elseif ($successCount/$totalTests -gt 0.8) { "‚ö†Ô∏è MAYORMENTE FUNCIONAL" }
         else { "‚ùå PROBLEMAS CR√çTICOS" }

Write-Host "`nüéØ ESTADO FINAL: $status" -ForegroundColor $(if ($successCount -eq $totalTests) { "Green" } elseif ($successCount/$totalTests -gt 0.8) { "Yellow" } else { "Red" })

if ($successCount -eq $totalTests) {
    Write-Host "`nüöÄ CONCLUSI√ìN: El backend est√° 100% operativo despu√©s de la sincronizaci√≥n SQL" -ForegroundColor Green
    Write-Host "‚úÖ Todas las funcionalidades cr√≠ticas validadas exitosamente" -ForegroundColor Green
    Write-Host "‚úÖ Los stored procedures funcionan correctamente" -ForegroundColor Green
    Write-Host "‚úÖ Listo para producci√≥n" -ForegroundColor Green
} elseif ($successCount/$totalTests -gt 0.8) {
    Write-Host "`n‚ö†Ô∏è CONCLUSI√ìN: El backend est√° mayormente funcional con algunos problemas menores" -ForegroundColor Yellow
    Write-Host "üìã Revisar errores espec√≠ficos arriba" -ForegroundColor Yellow
} else {
    Write-Host "`n‚ùå CONCLUSI√ìN: Se detectaron problemas cr√≠ticos que requieren atenci√≥n inmediata" -ForegroundColor Red
    Write-Host "üîß Revisar configuraci√≥n y stored procedures" -ForegroundColor Red
}

Write-Host "`nüìÖ Validaci√≥n completada: $(Get-Date)" -ForegroundColor Gray 