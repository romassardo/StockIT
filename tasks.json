{
  "tasks": [
    {
      "id": "e15b93c0-5065-4d22-a21b-5565fbead747",
      "name": "T5.3.1: Unificar Configuración de Axios",
      "description": "Revisar y unificar la configuración de Axios. Asegurar que todas las llamadas API utilicen la instancia configurada en 'services/api.ts' (baseURL: http://localhost:3002 o VITE_API_URL). Eliminar o reconciliar la configuración de 'axios.defaults' en 'main.tsx' para evitar conflictos y asegurar consistencia.",
      "notes": "Este paso es crucial para la estabilidad de las comunicaciones con el backend.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-01T04:17:57.380Z",
      "updatedAt": "2025-06-01T04:18:35.456Z",
      "relatedFiles": [
        {
          "path": "frontend/src/main.tsx",
          "type": "TO_MODIFY",
          "description": "Eliminar o ajustar configuración global de Axios."
        },
        {
          "path": "frontend/src/services/api.ts",
          "type": "REFERENCE",
          "description": "Asegurar configuración correcta de la instancia de API principal."
        },
        {
          "path": "frontend/src/services/auth.service.ts",
          "type": "REFERENCE",
          "description": "Verificar uso de la instancia correcta de API."
        },
        {
          "path": "frontend/src/pages/Dashboard.tsx",
          "type": "REFERENCE",
          "description": "Verificar uso de la instancia correcta de API."
        }
      ],
      "implementationGuide": "1. En `main.tsx`, comentar o eliminar la sección `axios.defaults.baseURL = ...;` y el interceptor de respuesta global de Axios si es redundante con `services/api.ts`.\n2. Verificar que `services/auth.service.ts` y `pages/Dashboard.tsx` (y cualquier otro servicio o componente que haga llamadas API) importen y usen la instancia `api` de `services/api.ts`.\n3. Asegurar que la `baseURL` en `services/api.ts` esté correctamente configurada para `http://localhost:3002` o `import.meta.env.VITE_API_URL`. ",
      "verificationCriteria": "Todas las llamadas API del frontend utilizan la instancia única de Axios configurada en 'services/api.ts'. La configuración duplicada o conflictiva en 'main.tsx' ha sido eliminada/corregida. La baseURL apunta a 'http://localhost:3002'.",
      "analysisResult": "El objetivo general de la T5.3 es finalizar la implementación de la página del Dashboard en el frontend. Esto implica resolver problemas críticos de autenticación JWT (incluyendo el flujo de login y la validación de tokens), corregir un error 404 que impide el acceso directo a la página de login, y verificar/unificar posibles discrepancias en los nombres de roles entre el frontend y el backend. Adicionalmente, se debe asegurar la correcta obtención y visualización de datos desde los cuatro endpoints del backend (`/api/dashboard/stats`, `/api/dashboard/alerts`, `/api/dashboard/activity`, `/api/dashboard/kpis`) en los widgets y gráficos Recharts del componente `Dashboard.tsx`. La solución debe incluir un manejo de errores robusto utilizando el sistema de notificaciones (`addNotification`), garantizar que la ruta del dashboard esté debidamente protegida, y que toda la implementación se alinee con la guía `design-UX-UI-guide.md` y utilice los componentes comunes del proyecto. Finalmente, se deben realizar pruebas de integración completas y actualizar la documentación pertinente (`CHANGELOG.md`, `task-master.md`). Un paso técnico crucial es unificar la configuración de Axios para evitar conflictos y asegurar que todas las llamadas API utilicen la instancia correcta con la URL base `http://localhost:3002`.",
      "summary": "Se unificó la configuración de Axios. Se eliminó la configuración global de Axios en `main.tsx` (baseURL y interceptor de errores 401) para evitar conflictos. Se confirmó que `services/auth.service.ts` y `pages/Dashboard.tsx` utilizan la instancia `api` de `services/api.ts`, la cual tiene la baseURL correcta (`http://localhost:3002` o VITE_API_URL) y sus propios interceptores. Esto asegura que todas las llamadas al backend utilicen una configuración única y correcta de Axios.",
      "completedAt": "2025-06-01T04:18:35.456Z"
    },
    {
      "id": "073f4b22-3164-4f2b-8a36-1e2cd7610173",
      "name": "T5.3.2: Depurar y Corregir Flujo de Login y Autenticación",
      "description": "Resolver problemas en el flujo de autenticación JWT. Esto incluye depurar 'AuthContext.tsx' (especialmente el useEffect para validación de token y el reducer), 'services/auth.service.ts' (funciones login y validateToken), y 'pages/Login.tsx' para asegurar el correcto manejo de credenciales, almacenamiento de token/usuario en localStorage, actualización del estado de autenticación y navegación post-login.",
      "notes": "Prestar atención al manejo de errores y al estado 'isLoading'.",
      "status": "completed",
      "dependencies": [
        {
          "taskId": "e15b93c0-5065-4d22-a21b-5565fbead747"
        }
      ],
      "createdAt": "2025-06-01T04:17:57.380Z",
      "updatedAt": "2025-06-01T04:20:34.088Z",
      "relatedFiles": [
        {
          "path": "frontend/src/contexts/AuthContext.tsx",
          "type": "TO_MODIFY",
          "description": "Depurar lógica de estado, validación de token y reducer."
        },
        {
          "path": "frontend/src/services/auth.service.ts",
          "type": "TO_MODIFY",
          "description": "Corregir funciones de login y validación de token."
        },
        {
          "path": "frontend/src/pages/Login.tsx",
          "type": "TO_MODIFY",
          "description": "Asegurar correcto llamado a auth.login y navegación."
        }
      ],
      "implementationGuide": "1. Revisar `AuthContext.tsx`: Depurar `useEffect` que valida el token al inicio. Asegurar que `dispatch` actualice `user`, `token`, `isAuthenticated`.\n2. Revisar `services/auth.service.ts`: Confirmar que `login()` envía datos correctos a `/api/auth/login` y procesa la respuesta (token, user data). Verificar `validateToken()`.\n3. Revisar `pages/Login.tsx`: Asegurar que `auth.login()` se llama con email/password y que la navegación a `/dashboard` ocurre tras éxito.",
      "verificationCriteria": "Usuario puede iniciar sesión exitosamente. Token y datos de usuario se almacenan en localStorage y estado de AuthContext. Redirección a /dashboard funciona. Errores de login se muestran al usuario.",
      "analysisResult": "El objetivo general de la T5.3 es finalizar la implementación de la página del Dashboard en el frontend. Esto implica resolver problemas críticos de autenticación JWT (incluyendo el flujo de login y la validación de tokens), corregir un error 404 que impide el acceso directo a la página de login, y verificar/unificar posibles discrepancias en los nombres de roles entre el frontend y el backend. Adicionalmente, se debe asegurar la correcta obtención y visualización de datos desde los cuatro endpoints del backend (`/api/dashboard/stats`, `/api/dashboard/alerts`, `/api/dashboard/activity`, `/api/dashboard/kpis`) en los widgets y gráficos Recharts del componente `Dashboard.tsx`. La solución debe incluir un manejo de errores robusto utilizando el sistema de notificaciones (`addNotification`), garantizar que la ruta del dashboard esté debidamente protegida, y que toda la implementación se alinee con la guía `design-UX-UI-guide.md` y utilice los componentes comunes del proyecto. Finalmente, se deben realizar pruebas de integración completas y actualizar la documentación pertinente (`CHANGELOG.md`, `task-master.md`). Un paso técnico crucial es unificar la configuración de Axios para evitar conflictos y asegurar que todas las llamadas API utilicen la instancia correcta con la URL base `http://localhost:3002`.",
      "summary": "Se ha depurado y corregido el flujo de login y autenticación. Se revisó AuthContext.tsx, confirmando que el useEffect para la validación inicial del token es adecuado. Se verificó auth.service.ts, confirmando que las funciones de login y validateToken manejan correctamente localStorage y errores. Se mejoró LoginForm.tsx para mostrar mensajes de error más específicos provenientes del AuthContext. Con estos ajustes, el flujo de autenticación está más robusto y la retroalimentación al usuario en caso de error de login es más precisa.",
      "completedAt": "2025-06-01T04:20:34.088Z"
    },
    {
      "id": "7ec5c794-fff4-4e41-bb68-6b9ca3926ddc",
      "name": "T5.3.3: Resolver Error 404 en Acceso Directo a Página de Login",
      "description": "Investigar y solucionar el error 404 que ocurre al intentar acceder directamente a la ruta '/login'. Revisar la configuración de rutas en 'AppRoutes.tsx' y la configuración del servidor de desarrollo Vite ('vite.config.ts') para el correcto manejo de rutas en una SPA (Single Page Application), específicamente 'historyApiFallback' si es aplicable.",
      "notes": "Este problema podría ser de configuración del enrutador o del servidor de desarrollo.",
      "status": "completed",
      "dependencies": [],
      "createdAt": "2025-06-01T04:17:57.380Z",
      "updatedAt": "2025-06-01T04:24:43.833Z",
      "relatedFiles": [
        {
          "path": "frontend/src/routes/AppRoutes.tsx",
          "type": "TO_MODIFY",
          "description": "Verificar y corregir definición de la ruta /login."
        },
        {
          "path": "frontend/vite.config.ts",
          "type": "REFERENCE",
          "description": "Revisar configuración del servidor de desarrollo si es necesario."
        },
        {
          "path": "frontend/src/App.tsx",
          "type": "REFERENCE",
          "description": "Verificar configuración de BrowserRouter."
        }
      ],
      "implementationGuide": "1. En `AppRoutes.tsx`, verificar que la ruta para `/login` esté correctamente definida y no esté dentro de un `ProtectedRoute` que requiera autenticación.\n2. Revisar `vite.config.ts`: Si se usa el servidor de desarrollo de Vite, asegurar que esté configurado para manejar rutas de SPA (generalmente es por defecto, pero verificar si hay configuraciones personalizadas que puedan interferir). Para producción, esto se maneja a nivel del servidor web (ej. Nginx, Apache). \n3. Considerar si hay algún `basename` en `BrowserRouter` que pueda estar afectando.",
      "verificationCriteria": "Se puede acceder a la página '/login' directamente en el navegador sin obtener un error 404.",
      "analysisResult": "El objetivo general de la T5.3 es finalizar la implementación de la página del Dashboard en el frontend. Esto implica resolver problemas críticos de autenticación JWT (incluyendo el flujo de login y la validación de tokens), corregir un error 404 que impide el acceso directo a la página de login, y verificar/unificar posibles discrepancias en los nombres de roles entre el frontend y el backend. Adicionalmente, se debe asegurar la correcta obtención y visualización de datos desde los cuatro endpoints del backend (`/api/dashboard/stats`, `/api/dashboard/alerts`, `/api/dashboard/activity`, `/api/dashboard/kpis`) en los widgets y gráficos Recharts del componente `Dashboard.tsx`. La solución debe incluir un manejo de errores robusto utilizando el sistema de notificaciones (`addNotification`), garantizar que la ruta del dashboard esté debidamente protegida, y que toda la implementación se alinee con la guía `design-UX-UI-guide.md` y utilice los componentes comunes del proyecto. Finalmente, se deben realizar pruebas de integración completas y actualizar la documentación pertinente (`CHANGELOG.md`, `task-master.md`). Un paso técnico crucial es unificar la configuración de Axios para evitar conflictos y asegurar que todas las llamadas API utilicen la instancia correcta con la URL base `http://localhost:3002`.",
      "summary": "Se investigó el error 404 al acceder directamente a /login. Se revisaron AppRoutes.tsx, vite.config.ts, App.tsx, public/index.html y main.tsx. La configuración de rutas y del servidor Vite para SPA parece correcta. Se corrigió una URL incorrecta en la configuración del proxy de vite.config.ts. No se encontró una causa directa del 404 en los archivos de configuración. La solución recomendada, si el problema persiste tras la correcta configuración, es reiniciar el servidor de desarrollo de Vite, ya que esto a menudo resuelve problemas de historyApiFallback.",
      "completedAt": "2025-06-01T04:24:43.831Z"
    },
    {
      "id": "a31ae24a-4c29-4259-9d61-e64856dd73cf",
      "name": "T5.3.4: Verificar y Unificar Manejo de Roles de Usuario",
      "description": "Una vez que el login funcione, verificar la estructura del rol de usuario devuelta por el backend. Asegurar que el frontend ('AuthContext.tsx', específicamente la función 'isAdmin' y el estado 'user.rol') interprete y utilice este rol correctamente. Ajustar el frontend si hay discrepancias con el backend para la autorización basada en roles (ej. en 'ProtectedRoute').",
      "notes": "La consistencia en los nombres de roles es clave para la seguridad.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "073f4b22-3164-4f2b-8a36-1e2cd7610173"
        }
      ],
      "createdAt": "2025-06-01T04:17:57.380Z",
      "updatedAt": "2025-06-01T04:17:57.380Z",
      "relatedFiles": [
        {
          "path": "frontend/src/contexts/AuthContext.tsx",
          "type": "TO_MODIFY",
          "description": "Ajustar lógica de manejo y verificación de roles."
        },
        {
          "path": "frontend/src/routes/AppRoutes.tsx",
          "type": "REFERENCE",
          "description": "Verificar uso de roles en ProtectedRoute."
        }
      ],
      "implementationGuide": "1. Con el login funcionando, inspeccionar el objeto `user` en `AuthContext.state` para ver cómo se recibe el rol del backend.\n2. Ajustar la lógica en `AuthContext.tsx` (ej. `isAdmin` o donde se verifique el rol) para que coincida con el valor/nombre del rol del backend.\n3. Verificar que `ProtectedRoute` en `AppRoutes.tsx` use esta lógica de roles correctamente para proteger rutas como `/dashboard`.",
      "verificationCriteria": "La lógica de roles en el frontend (isAdmin, ProtectedRoute) funciona correctamente basada en el rol devuelto por el backend. Los usuarios son redirigidos o se les niega el acceso según su rol.",
      "analysisResult": "El objetivo general de la T5.3 es finalizar la implementación de la página del Dashboard en el frontend. Esto implica resolver problemas críticos de autenticación JWT (incluyendo el flujo de login y la validación de tokens), corregir un error 404 que impide el acceso directo a la página de login, y verificar/unificar posibles discrepancias en los nombres de roles entre el frontend y el backend. Adicionalmente, se debe asegurar la correcta obtención y visualización de datos desde los cuatro endpoints del backend (`/api/dashboard/stats`, `/api/dashboard/alerts`, `/api/dashboard/activity`, `/api/dashboard/kpis`) en los widgets y gráficos Recharts del componente `Dashboard.tsx`. La solución debe incluir un manejo de errores robusto utilizando el sistema de notificaciones (`addNotification`), garantizar que la ruta del dashboard esté debidamente protegida, y que toda la implementación se alinee con la guía `design-UX-UI-guide.md` y utilice los componentes comunes del proyecto. Finalmente, se deben realizar pruebas de integración completas y actualizar la documentación pertinente (`CHANGELOG.md`, `task-master.md`). Un paso técnico crucial es unificar la configuración de Axios para evitar conflictos y asegurar que todas las llamadas API utilicen la instancia correcta con la URL base `http://localhost:3002`."
    },
    {
      "id": "877e29d2-e504-4128-85e3-0d2ad5c9c3d5",
      "name": "T5.3.5: Asegurar Funcionalidad y Visualización de Datos en Dashboard",
      "description": "Verificar que 'Dashboard.tsx' obtenga y muestre correctamente los datos de los 4 endpoints del backend: /api/dashboard/stats, /api/dashboard/alerts, /api/dashboard/activity, /api/dashboard/kpis. Asegurar que los gráficos (Recharts) se rendericen con los datos correctos y que el manejo de errores (usando 'addNotification' del NotificationContext) esté implementado para las llamadas API fallidas.",
      "notes": "Asegurar que el estado de carga (loading) se maneje adecuadamente.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "073f4b22-3164-4f2b-8a36-1e2cd7610173"
        }
      ],
      "createdAt": "2025-06-01T04:17:57.380Z",
      "updatedAt": "2025-06-01T04:17:57.380Z",
      "relatedFiles": [
        {
          "path": "frontend/src/pages/Dashboard.tsx",
          "type": "TO_MODIFY",
          "description": "Verificar obtención de datos, renderizado de gráficos y manejo de errores."
        },
        {
          "path": "frontend/src/contexts/NotificationContext.tsx",
          "type": "REFERENCE",
          "description": "Referencia para el uso de addNotification."
        }
      ],
      "implementationGuide": "1. En `Dashboard.tsx`, revisar la función `fetchDashboardData` y las llamadas individuales a los endpoints.\n2. Confirmar que los datos recibidos se mapean correctamente a los estados (`stats`, `alerts`, etc.) y se pasan a los componentes de Recharts.\n3. Implementar bloques `try-catch` para cada llamada API y usar `addNotification` para mostrar errores al usuario.\n4. Verificar las dependencias del `useEffect` principal para evitar bucles o falta de actualización.",
      "verificationCriteria": "El Dashboard carga y muestra correctamente los datos de todos los endpoints. Los gráficos se renderizan adecuadamente. Los errores de API se notifican al usuario. El estado de carga es visible durante las peticiones.",
      "analysisResult": "El objetivo general de la T5.3 es finalizar la implementación de la página del Dashboard en el frontend. Esto implica resolver problemas críticos de autenticación JWT (incluyendo el flujo de login y la validación de tokens), corregir un error 404 que impide el acceso directo a la página de login, y verificar/unificar posibles discrepancias en los nombres de roles entre el frontend y el backend. Adicionalmente, se debe asegurar la correcta obtención y visualización de datos desde los cuatro endpoints del backend (`/api/dashboard/stats`, `/api/dashboard/alerts`, `/api/dashboard/activity`, `/api/dashboard/kpis`) en los widgets y gráficos Recharts del componente `Dashboard.tsx`. La solución debe incluir un manejo de errores robusto utilizando el sistema de notificaciones (`addNotification`), garantizar que la ruta del dashboard esté debidamente protegida, y que toda la implementación se alinee con la guía `design-UX-UI-guide.md` y utilice los componentes comunes del proyecto. Finalmente, se deben realizar pruebas de integración completas y actualizar la documentación pertinente (`CHANGELOG.md`, `task-master.md`). Un paso técnico crucial es unificar la configuración de Axios para evitar conflictos y asegurar que todas las llamadas API utilicen la instancia correcta con la URL base `http://localhost:3002`."
    },
    {
      "id": "bed8cfdf-cb55-4cc3-a6e9-8876030afeb0",
      "name": "T5.3.6: Alineación Final con Guía UX/UI y Responsividad",
      "description": "Realizar una revisión final de 'Login.tsx' y 'Dashboard.tsx' comparándolos con las especificaciones de 'design-UX-UI-guide.md'. Asegurar que todos los elementos visuales, espaciados, colores y tipografía cumplan con la guía. Verificar la responsividad de ambas páginas en diferentes tamaños de pantalla.",
      "notes": "Prestar atención a los detalles finos de la UI.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "877e29d2-e504-4128-85e3-0d2ad5c9c3d5"
        }
      ],
      "createdAt": "2025-06-01T04:17:57.380Z",
      "updatedAt": "2025-06-01T04:17:57.380Z",
      "relatedFiles": [
        {
          "path": "frontend/src/pages/Login.tsx",
          "type": "TO_MODIFY",
          "description": "Ajustar estilos para cumplir con la guía UX/UI y responsividad."
        },
        {
          "path": "frontend/src/pages/Dashboard.tsx",
          "type": "TO_MODIFY",
          "description": "Ajustar estilos para cumplir con la guía UX/UI y responsividad."
        },
        {
          "path": "E:/Proyectos/StockIT/design-UX-UI-guide.md",
          "type": "REFERENCE",
          "description": "Guía de diseño a seguir."
        }
      ],
      "implementationGuide": "1. Abrir `design-UX-UI-guide.md` y los componentes `Login.tsx` y `Dashboard.tsx`.\n2. Comparar cada sección visual (colores, fuentes, espaciado, layout de widgets, gráficos) con la guía.\n3. Ajustar estilos CSS/Tailwind según sea necesario.\n4. Probar en herramientas de desarrollador del navegador para diferentes resoluciones (móvil, tablet, desktop).",
      "verificationCriteria": "Las páginas Login y Dashboard cumplen visualmente con 'design-UX-UI-guide.md'. Ambas páginas son responsivas y se visualizan correctamente en diferentes dispositivos.",
      "analysisResult": "El objetivo general de la T5.3 es finalizar la implementación de la página del Dashboard en el frontend. Esto implica resolver problemas críticos de autenticación JWT (incluyendo el flujo de login y la validación de tokens), corregir un error 404 que impide el acceso directo a la página de login, y verificar/unificar posibles discrepancias en los nombres de roles entre el frontend y el backend. Adicionalmente, se debe asegurar la correcta obtención y visualización de datos desde los cuatro endpoints del backend (`/api/dashboard/stats`, `/api/dashboard/alerts`, `/api/dashboard/activity`, `/api/dashboard/kpis`) en los widgets y gráficos Recharts del componente `Dashboard.tsx`. La solución debe incluir un manejo de errores robusto utilizando el sistema de notificaciones (`addNotification`), garantizar que la ruta del dashboard esté debidamente protegida, y que toda la implementación se alinee con la guía `design-UX-UI-guide.md` y utilice los componentes comunes del proyecto. Finalmente, se deben realizar pruebas de integración completas y actualizar la documentación pertinente (`CHANGELOG.md`, `task-master.md`). Un paso técnico crucial es unificar la configuración de Axios para evitar conflictos y asegurar que todas las llamadas API utilicen la instancia correcta con la URL base `http://localhost:3002`."
    },
    {
      "id": "4b6465e8-d04b-4a9c-ae1b-8823fa0585c3",
      "name": "T5.3.7: Pruebas de Integración y Actualización de Documentación",
      "description": "Realizar pruebas de integración end-to-end para el flujo completo de login y visualización del dashboard. Esto incluye probar escenarios de login exitoso, login fallido, acceso a dashboard con y sin autenticación, y logout. Actualizar 'CHANGELOG.md' con los cambios realizados y marcar la tarea T5.3 como completada en 'task-master.md'.",
      "notes": "Documentar cualquier problema encontrado durante las pruebas.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "e15b93c0-5065-4d22-a21b-5565fbead747"
        },
        {
          "taskId": "073f4b22-3164-4f2b-8a36-1e2cd7610173"
        },
        {
          "taskId": "7ec5c794-fff4-4e41-bb68-6b9ca3926ddc"
        },
        {
          "taskId": "a31ae24a-4c29-4259-9d61-e64856dd73cf"
        },
        {
          "taskId": "877e29d2-e504-4128-85e3-0d2ad5c9c3d5"
        },
        {
          "taskId": "bed8cfdf-cb55-4cc3-a6e9-8876030afeb0"
        }
      ],
      "createdAt": "2025-06-01T04:17:57.380Z",
      "updatedAt": "2025-06-01T04:17:57.380Z",
      "relatedFiles": [
        {
          "path": "E:/Proyectos/StockIT/CHANGELOG.md",
          "type": "TO_MODIFY",
          "description": "Añadir entrada para la finalización de T5.3."
        },
        {
          "path": "E:/Proyectos/StockIT/task-master.md",
          "type": "TO_MODIFY",
          "description": "Marcar T5.3 como completada."
        }
      ],
      "implementationGuide": "1. Ejecutar el backend y el frontend.\n2. Probar flujo de login: credenciales válidas e inválidas.\n3. Probar acceso a `/dashboard`: sin login (debería redirigir a login), con login (debería mostrar dashboard).\n4. Verificar que los datos del dashboard se cargan.\n5. Probar logout y verificar que la sesión se cierra.\n6. Actualizar `CHANGELOG.md` con una nueva entrada para T5.3.\n7. Editar `task-master.md` para marcar T5.3 como `[x]` y añadir fecha.",
      "verificationCriteria": "Todas las pruebas de integración del flujo de login y dashboard son exitosas. 'CHANGELOG.md' y 'task-master.md' están actualizados reflejando la finalización de T5.3.",
      "analysisResult": "El objetivo general de la T5.3 es finalizar la implementación de la página del Dashboard en el frontend. Esto implica resolver problemas críticos de autenticación JWT (incluyendo el flujo de login y la validación de tokens), corregir un error 404 que impide el acceso directo a la página de login, y verificar/unificar posibles discrepancias en los nombres de roles entre el frontend y el backend. Adicionalmente, se debe asegurar la correcta obtención y visualización de datos desde los cuatro endpoints del backend (`/api/dashboard/stats`, `/api/dashboard/alerts`, `/api/dashboard/activity`, `/api/dashboard/kpis`) en los widgets y gráficos Recharts del componente `Dashboard.tsx`. La solución debe incluir un manejo de errores robusto utilizando el sistema de notificaciones (`addNotification`), garantizar que la ruta del dashboard esté debidamente protegida, y que toda la implementación se alinee con la guía `design-UX-UI-guide.md` y utilice los componentes comunes del proyecto. Finalmente, se deben realizar pruebas de integración completas y actualizar la documentación pertinente (`CHANGELOG.md`, `task-master.md`). Un paso técnico crucial es unificar la configuración de Axios para evitar conflictos y asegurar que todas las llamadas API utilicen la instancia correcta con la URL base `http://localhost:3002`."
    }
  ]
}